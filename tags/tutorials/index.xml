<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorials on SECBIT Blog</title>
    <link>https://sec-bit.github.io/blog/tags/tutorials/</link>
    <description>Recent content in tutorials on SECBIT Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 22 Jan 2020 08:00:00 +0800</lastBuildDate><atom:link href="https://sec-bit.github.io/blog/tags/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从零开始学习 zk-SNARK（五）——Pinocchio 协议</title>
      <link>https://sec-bit.github.io/blog/2020/01/22/learn-zk-snark-from-zero-part-five/</link>
      <pubDate>Wed, 22 Jan 2020 08:00:00 +0800</pubDate>
      
      <guid>https://sec-bit.github.io/blog/2020/01/22/learn-zk-snark-from-zero-part-five/</guid>
      <description>作为本系列的最后一篇文章，本文继续对 zk-SNARK 协议进行完善，最终形成一个完整的 zk-SNARK 协议。</description>
    </item>
    
    <item>
      <title>从零开始学习 zk-SNARK（四）——多项式的约束</title>
      <link>https://sec-bit.github.io/blog/2020/01/15/learn-zk-snark-from-zero-part-four/</link>
      <pubDate>Wed, 15 Jan 2020 08:00:00 +0800</pubDate>
      
      <guid>https://sec-bit.github.io/blog/2020/01/15/learn-zk-snark-from-zero-part-four/</guid>
      <description>上一篇文章中我们学习了如何将程序转换为多项式进行证明。到这里似乎已经有点晕了，本文将对协议执行进一步的约束，并对协议展开优化。</description>
    </item>
    
    <item>
      <title>从零开始学习 zk-SNARK（三）——从程序到多项式的构造</title>
      <link>https://sec-bit.github.io/blog/2020/01/08/learn-zk-snark-from-zero-part-three/</link>
      <pubDate>Wed, 08 Jan 2020 08:00:00 +0800</pubDate>
      
      <guid>https://sec-bit.github.io/blog/2020/01/08/learn-zk-snark-from-zero-part-three/</guid>
      <description>前文主要介绍了如何构造多项式的零知识证明协议，现在将开始探讨如何构造更通用的协议。本节主要是讲如何将一组计算的证明转换为多项式进行证明。本文重点主要包括：多项式的算术性质，多项式插值等。</description>
    </item>
    
    <item>
      <title>零知识证明 Learn by Coding：libsnark 入门篇</title>
      <link>https://sec-bit.github.io/blog/2020/01/03/zkp-learn-by-coding-libsnark-101/</link>
      <pubDate>Fri, 03 Jan 2020 08:00:00 +0800</pubDate>
      
      <guid>https://sec-bit.github.io/blog/2020/01/03/zkp-learn-by-coding-libsnark-101/</guid>
      <description>希望通过本系列文章，所有开发者都能亲自上手实践，在短时间内迅速入门 libsnark，一步步了解 libsnark 的基本概念，学会如何开发 zk-SNARKs 电路，完成证明的生成和验证，最终将零知识证明应用到真实业务中去。</description>
    </item>
    
    <item>
      <title>从零开始学习 zk-SNARK（二）——多项式的非交互式零知识证明</title>
      <link>https://sec-bit.github.io/blog/2020/01/01/learn-zk-snark-from-zero-part-two/</link>
      <pubDate>Wed, 01 Jan 2020 08:00:00 +0800</pubDate>
      
      <guid>https://sec-bit.github.io/blog/2020/01/01/learn-zk-snark-from-zero-part-two/</guid>
      <description>even@安比实验室: 上一篇文章中，作者介绍了如何利用多项式的性质来证明某个多项式的知识，相信大家已经对构造证明有了一些基本的认识。目前的证明协议仍然存在一些缺陷，本文将会针对这些薄弱项进行改进，进而最终构造出关于多项式的零知识证明协议。本文重点：KEA，交互式零知识证明，非交互式零知识证明和 Setup。</description>
    </item>
    
    <item>
      <title>从零开始学习 zk-SNARK（一）——多项式的性质与证明</title>
      <link>https://sec-bit.github.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/</link>
      <pubDate>Wed, 25 Dec 2019 08:00:00 +0800</pubDate>
      
      <guid>https://sec-bit.github.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/</guid>
      <description>当我第一次了解到 zk-SNARK 技术是如何将这些东西完美地融合在一起的时候，就被数学之美震撼到了，并且随着我发现的维度越多，好奇心就越强烈。在这篇文章中，我主要就基于一些实例简洁明了地阐明 zk-SNARK ，并对这里面的很多问题做出了解释，并利用这种方式分享了我的经验，进而让更多人也能够欣赏到这项最先进的技术以及它的创新之处，最终欣赏到数学之美。</description>
    </item>
    
    <item>
      <title>零知识证明学习资源汇总</title>
      <link>https://sec-bit.github.io/blog/2019/11/07/zkp-learning-resources/</link>
      <pubDate>Thu, 07 Nov 2019 08:00:00 +0800</pubDate>
      
      <guid>https://sec-bit.github.io/blog/2019/11/07/zkp-learning-resources/</guid>
      <description>本文收集了关于零知识证明的一些学习资料（包括科普文章、论文、开源仓库及相关学习网站等），并对这些资源进行了整理分析，希望能对大家有所帮助。</description>
    </item>
    
  </channel>
</rss>
